// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: dungeons.proto

package dungeonpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DungeonClient is the client API for Dungeon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DungeonClient interface {
	CreateDungeon(ctx context.Context, in *CreateDungeonReq, opts ...grpc.CallOption) (*CreateDungeonRep, error)
	Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRep, error)
}

type dungeonClient struct {
	cc grpc.ClientConnInterface
}

func NewDungeonClient(cc grpc.ClientConnInterface) DungeonClient {
	return &dungeonClient{cc}
}

func (c *dungeonClient) CreateDungeon(ctx context.Context, in *CreateDungeonReq, opts ...grpc.CallOption) (*CreateDungeonRep, error) {
	out := new(CreateDungeonRep)
	err := c.cc.Invoke(ctx, "/dungeonpc.Dungeon/CreateDungeon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dungeonClient) Ping(ctx context.Context, in *PingReq, opts ...grpc.CallOption) (*PingRep, error) {
	out := new(PingRep)
	err := c.cc.Invoke(ctx, "/dungeonpc.Dungeon/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DungeonServer is the server API for Dungeon service.
// All implementations must embed UnimplementedDungeonServer
// for forward compatibility
type DungeonServer interface {
	CreateDungeon(context.Context, *CreateDungeonReq) (*CreateDungeonRep, error)
	Ping(context.Context, *PingReq) (*PingRep, error)
	mustEmbedUnimplementedDungeonServer()
}

// UnimplementedDungeonServer must be embedded to have forward compatible implementations.
type UnimplementedDungeonServer struct {
}

func (UnimplementedDungeonServer) CreateDungeon(context.Context, *CreateDungeonReq) (*CreateDungeonRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDungeon not implemented")
}
func (UnimplementedDungeonServer) Ping(context.Context, *PingReq) (*PingRep, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedDungeonServer) mustEmbedUnimplementedDungeonServer() {}

// UnsafeDungeonServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DungeonServer will
// result in compilation errors.
type UnsafeDungeonServer interface {
	mustEmbedUnimplementedDungeonServer()
}

func RegisterDungeonServer(s grpc.ServiceRegistrar, srv DungeonServer) {
	s.RegisterService(&Dungeon_ServiceDesc, srv)
}

func _Dungeon_CreateDungeon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateDungeonReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DungeonServer).CreateDungeon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dungeonpc.Dungeon/CreateDungeon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DungeonServer).CreateDungeon(ctx, req.(*CreateDungeonReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dungeon_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DungeonServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dungeonpc.Dungeon/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DungeonServer).Ping(ctx, req.(*PingReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dungeon_ServiceDesc is the grpc.ServiceDesc for Dungeon service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dungeon_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dungeonpc.Dungeon",
	HandlerType: (*DungeonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateDungeon",
			Handler:    _Dungeon_CreateDungeon_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Dungeon_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dungeons.proto",
}
